. : id
# : class

for get help :
  ng generate --help

interpolation refers to embedding expressions into marked up text
by default, interpolation uses the double curly braces {{ and  }} as delimiters

property binding in angular helps you set values for properties of HTML elements or directives
use property binding to do things such as toggle button functionality, set paths programmatically, and share values between components

event binding lets you listen for and respond to user actions such as keystrokes, mouse movements, clicks and touches
<button (click)="onSave()">Save</button>
above (click) is target event name and onSave() is template statement

two-way binding gives components in your application a way to share data. use two-way binding to listen for events and update values simultaneously between parent and child components

directives are classes that add additional behaviour to elements in your angular applications
use angular's built-in directives to manage forms,lists,styles, and what users see.
the different types of angular directives are
  components
    used with a template
  attribute directives
    change the appearance or behavior of an element,component or another directive
  structural directives
    change the DOM layout by adding and removing DOM elements
Built-in attribute directives
  NgClass, NgStyle, NgModel
Built-in structural directives
  NgIf, NgFor, NgSwitch


pipes are simple functions to use in template expressions to accept an input value and return a transformed value
pipes are useful because you can use them throughout your application, while only declaring each pipe once
use pipes to transform strings, currency amounts, dates and other data for display

parent to child data binding
  parent component html :
     <app-selected-spectacle [spectacle]="spectacle"></app-selected-spectacle>
  child component ts:
    @Input() spectacle: Spectacle= {} as Spectacle;

child to parent data binding
  child component:
    @Output() emitSpectacle = new EventEmitter<Spectacle>();
    addToCart() {
        this.emitSpectacle.emit(this.spectacle);
    }
  parent component
    <app-selected-spectacle (emitSpectacle)="addToCart($event)"></app-selected-spectacle>

lifecycle hooks
  A component instance has a lifecycle that starts when angular instantiates the component class and renders the component view along with its child views
  The lifecycle continues with change detection, as angular checks to see when data-bound properties change, and updates both the view and the component instance as needed
  The lifecycle ends when angular destroys the component instance and removes its rendered template from the DOM
  Directives have a similar lifecycle

components lifecycle hooks
  ngOnChange()
  ngOnInit()
  ngDoCheck()
  ngAfterContentInit()
  ngAfterContentChecked()
  ngAfterViewInit()
  ngAfterViewChecked()
  ngOnDestroy()












